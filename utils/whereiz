#!/usr/bin/env perl

# Copyright (c) 2011, Ryan M. Lefever
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are
# met:
#
#     * Redistributions of source code must retain the above copyright
#       notice, this list of conditions and the following disclaimer.
#     * Redistributions in binary form must reproduce the above
#       copyright notice, this list of conditions and the following
#       disclaimer in the documentation and/or other materials provided
#       with the distribution.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
# "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
# LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
# A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
# HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
# SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
# LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
# DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
# THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
# OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

# DESCRIPTION: Search for binaries in the users path.

# enable perl's safety info
use strict;
use warnings;
use Env;
Env::import();

# Global variables
my $search = "";

main();
exit(0);

# Parse command line arguments.
sub parsecla{
  foreach my $arg (@ARGV){
    if($arg =~ /^-/){
      if($arg eq "--help" || $arg eq "-h"){ usage(); exit(0); }
      else{ print STDERR "Illegal option.\n"; exit(1); }
    }
    elsif($search eq ''){ $search = $arg; }
    else{ print STDERR "Illegal positional argument.\n"; exit(1); }
  }
}

# Print usage information.
sub usage {
  print "whereiz [OPTIONS] <binary>
DESCRIPTION: List the locations in the user's path where the binary is
             located.
             This program is part of the SiLT project:
             http://code.google.com/p/silt
OPTIONS:
  --help, -h  print this message
";
}

sub main{
  parsecla();

  my $output = "";
  my @pathdirs = split /:/, (split /\n/, $ENV{PATH})[0];
  PATHENTRY: foreach my $p (@pathdirs){
    if(-d $p){
      my @lsout = split /\n/, `ls "$p"`;
      foreach my $e (@lsout){
	if(($p . "/" . $search) eq ($p . "/" . $e)){
	  $output = $output . " " . $p . "/" . $search;
	  next PATHENTRY;
	}
      }
    }
  }

  $output =~ s/^ //;
  if ($output ne ""){ print $output . "\n"; }
}
